import { Component } from '@angular/core';
import { Order } from '../../Models/OrderDTO';
import { OrderService } from '../../Service/Order.Service';
import { LoginService } from '../../Service/Login.Service';
import { Router, RouterLink } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import * as XLSX from 'xlsx';
import * as FileSaver from 'file-saver';
import { CartItem } from '../../Models/CartDTO';

@Component({
  selector: 'app-admin-order',
  imports: [FormsModule,CommonModule,RouterLink],
  templateUrl: './admin-order.component.html',
  styleUrl: './admin-order.component.css'
})
export class AdminOrderComponent {
  isMenu = true;
  openMenu(){
    this.isMenu = true;
  }
  closeMenu(){
    this.isMenu = false;
  }
  order: Order [] = [];
  orderdetail: Order [] = [];
  cartItems: CartItem [] = [];
  totalOrder: number = 0;
  isOrderDeatail: boolean = false;
  selectedStatus: string = ''; // Tr·∫°ng th√°i ƒë∆∞·ª£c ch·ªçn t·ª´ dropdown
  pendingOrders: number = 0;  // S·ªë ƒë∆°n h√†ng ch·ªù x·ª≠ l√Ω
  deliveredOrders: number = 0; // S·ªë ƒë∆°n h√†ng ƒë√£ giao
  orderStatuses = [
    { value: '0', label: 'Ch·ªù x·ª≠ l√Ω' },
    { value: '1', label: 'ƒêang x·ª≠ l√Ω' },
    { value: '2', label: 'ƒêang giao h√†ng' },
    { value: '3', label: 'ƒê√£ giao h√†ng' },
    { value: '4', label: 'ƒê√£ h·ªßy' }
  ]; // Danh s√°ch tr·∫°ng th√°i
  constructor(private orderService: OrderService, private login: LoginService, private router: Router){}

  ngOnInit(): void {
    this.loadOrder();
  }
  page: number = 1;
  totalPages: number = 0;
  loadOrder(){
    this.orderService.GetAllOrders(this.page).subscribe(data =>{
      this.order = data.Orders;
      this.totalOrder = data.TotalOrders;
      this.totalPages = data.TotalPages;
      this.loadOrderCountByStatus();
      this.updateVisiblePages();
      console.log(data);
    })
  }
  visiblePages: number[] = [];
  updateVisiblePages(): void {
    const maxVisible = 5; // S·ªë trang hi·ªÉn th·ªã t·ªëi ƒëa
    const half = Math.floor(maxVisible / 2);
    let start = Math.max(1, this.page - half);
    let end = Math.min(this.totalPages, start + maxVisible - 1);

    if (end - start < maxVisible - 1) {
      start = Math.max(1, end - maxVisible + 1);
    }

    this.visiblePages = [];
    for (let i = start; i <= end; i++) {
      this.visiblePages.push(i);
    }
  }
  // Ph√¢n trang
  goToPage(pageNumber: number): void {
    if (pageNumber >= 1 && pageNumber <= this.totalPages) {
      this.page = pageNumber;
      this.loadOrder();
      this.updateVisiblePages()
    }
  }

  prevPage(): void {
    if (this.page > 1) {
      this.page--;
      this.loadOrder();
      this.updateVisiblePages()
    }
  }

  nextPage(): void {
    if (this.page < this.totalPages) {
      this.page++;
      this.loadOrder();
      this.updateVisiblePages()
    }
  }


  loadOrderCountByStatus(): void {
    this.orderService.GetOrderCountByStatus().subscribe({
      next: (data) => {
        this.pendingOrders = data.pendingOrders;
        this.deliveredOrders = data.deliveredOrders;
      },
    });
  }

  GetOrderDetail(Id: number){
    this.isOrderDeatail = true;
    this.orderService.GetOrderId(Id).subscribe(data =>{
      this.orderdetail = data;
      console.log(data)
      this.selectedStatus = data[0].Status;
    })
  }
  UpdateStatus(Id: number){
    if (!this.selectedStatus) {
      alert('Vui l√≤ng ch·ªçn tr·∫°ng th√°i!');
      return;
    }
    const updateData = { status: this.selectedStatus };
    this.orderService.UpdateStatus(Id, updateData).subscribe({
      next: (reponse) => {
        alert('ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng ');
        //this.GetOrderDetail(Id);
        this.loadOrder(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ƒë∆°n h√†ng
        this.closedetail();

      },
      error: (error) => {
        alert(`L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: ${error.message}`);
      }
    });
  }
  
  getTotalDiscountForDetail(): number {
    const order = this.orderdetail[0];
    if (!order || !order.OrderItems) {
      return 0;
    }
  
    const sumOfItems = order.OrderItems.reduce((total, item) => {
      return total + (item.UnitPrice * item.Quantity);
    }, 0);
  
    // Gi·∫£m gi√° = T·ªïng g·ªëc - T·ªïng ƒë√£ thanh to√°n
    return sumOfItems - order.TotalAmount;
  }
  
  
  DeleteOrder(Id: number){
    this.orderService.DeleteOrder(Id).subscribe({
      next: (reponse) =>{
        alert("B·∫°n c√≥ mu·ªën qu√° H√≥a ƒë∆°n v·ªõi Id: " + Id);
        this.loadOrder();
      }
    })
  }
  closedetail(){
    this.isOrderDeatail = false;
  }
  // xu·∫•t file excel
  exportToExcel(): void {
    const order = this.orderdetail[0]; // V√¨ b·∫°n ƒëang l·∫∑p *ngFor nh∆∞ng ch·ªâ l√† 1 ƒë∆°n
  
    const customerInfo = [
      ['T√™n ng∆∞·ªùi mua', order.CustomerName],
      ['Email', order.Email],
      ['T·ªânh / Th√†nh ph·ªë', order.Province],
      ['Qu·∫≠n / Huy·ªán', order.District],
      ['Ph∆∞·ªùng / X√£', order.Wards],
      ['ƒê·ªãa ch·ªâ', order.Address],
      ['S·ªë ƒëi·ªán tho·∫°i', order.Phone],
      ['Ghi ch√∫', order.Note],
      ['Ng√†y mua', new Date(order.CreatedAt).toLocaleString()]
    ];
  
    const items = order.OrderItems.map(item => ({
      'T√™n s·∫£n ph·∫©m': item.ProductName,
      'M√£ PosCode': item.ProductPosCode,
      'S·ªë l∆∞·ª£ng': item.Quantity,
      'K√≠ch th∆∞·ªõc': item.SizeName,
      'M√†u s·∫Øc': item.ColorName,
      'Gi√°': item.UnitPrice
    }));

    const totals = [
      ['Gi·∫£m gi√° h√≥a ƒë∆°n:', ],
      ['T·ªïng ti·ªÅn ƒë∆°n h√†ng:', order.TotalAmount],
    ];
  
    const ws1 = XLSX.utils.aoa_to_sheet(customerInfo);
    // ƒê·∫∑t ƒë·ªô r·ªông cho ph·∫ßn customer info (2 c·ªôt ƒë·∫ßu ti√™n)
    ws1['!cols'] = [
      { wch: 40 },
      { wch: 60 },
      { wch: 40 },
      { wch: 40 },
      { wch: 40 },
      { wch: 40 },
      { wch: 40 },
      { wch: 40 },
      { wch: 40 }
    ];
    // Th√™m danh s√°ch s·∫£n ph·∫©m v√†o c√πng sheet (sau th√¥ng tin kh√°ch h√†ng)
    XLSX.utils.sheet_add_aoa(ws1, [['']], { origin: -1 }); // d√≤ng tr·ªëng
    XLSX.utils.sheet_add_aoa(ws1, [['Th√¥ng tin s·∫£n ph·∫©m']], { origin: -1 }); 
    XLSX.utils.sheet_add_json(ws1, items, { skipHeader: false, origin: -1 });
    // Set ƒë·ªô r·ªông cho c√°c c·ªôt s·∫£n ph·∫©m (ghi ƒë√® l√™n !cols c≈©)
    ws1['!cols'] = [
      { wch: 25 }, // T√™n s·∫£n ph·∫©m
      { wch: 18 }, // M√£ PosCode
      { wch: 12 }, // S·ªë l∆∞·ª£ng  
      { wch: 14 }, // K√≠ch th∆∞·ªõc
      { wch: 14 }, // M√†u s·∫Øc
      { wch: 12 }  // Gi√°
    ];
    // Th√™m t·ªïng h√≥a ƒë∆°n
    XLSX.utils.sheet_add_aoa(ws1, [['']], { origin: -1 }); // d√≤ng tr·ªëng
    XLSX.utils.sheet_add_aoa(ws1, [['T·ªïng h√≥a ƒë∆°n']], { origin: -1 }); 
    XLSX.utils.sheet_add_aoa(ws1, totals, { origin: -1 });
    // üëá Set chi·ªÅu r·ªông t·ª´ng c·ªôt (width t√≠nh theo k√Ω t·ª±)
  
    const wb: XLSX.WorkBook = { 
      Sheets: { 'ChiTietDonHang': ws1 },
      SheetNames: ['ChiTietDonHang']
    };
  
    // G·ªôp c√°c ph·∫ßn v√†o c√πng 1 sheet
    // XLSX.utils.sheet_add_json(ws1, items, { origin: -1 });
    // XLSX.utils.sheet_add_aoa(ws1, [['']], { origin: -1 });
    // XLSX.utils.sheet_add_aoa(ws1, totals, { origin: -1 });
  
    const excelBuffer: any = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    const data: Blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
    FileSaver.saveAs(data, `ChiTietDonHang_${order.Id}.xlsx`);
  }
  //
  logout(){
    this.login.logout();
    this.router.navigate(['admin/login']);
  }
  get isAdmin(): boolean{
    return this.login.isAdmin();
  }

}
